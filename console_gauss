CREATE TABLE test_table (
    id SERIAL PRIMARY KEY,
    data TEXT
);

-- 生成模拟数据（包含热点数据和随机数据）
INSERT INTO test_table (data)
SELECT
    CASE
        WHEN random() < 0.1 THEN 'abc'  -- 10% 的热点数据
        WHEN random() < 0.2 THEN 'xyz'  -- 10% 的热点数据
        ELSE md5(random()::text)        -- 80% 随机数据
    END
FROM generate_series(1, 10000000);

drop table  test_table;

EXPLAIN ANALYZE
SELECT COUNT(*) FROM test_table WHERE data = 'abc';

-- 创建索引
CREATE INDEX idx_data ON test_table(data);

ANALYZE test_table;

-- max_parallel_workers_per_gather = 4;


CREATE TABLE index_test (
    id SERIAL PRIMARY KEY,
    data INTEGER
);
INSERT INTO index_test (data)
SELECT floor((random() * 1000000) % 100) AS data
FROM generate_series(1, 1000000);

drop table index_test;
-- 创建不同类型的索引
drop index  hash_idx;

CREATE INDEX btree_idx ON index_test USING btree (data);
CREATE INDEX hash_idx ON index_test USING hash (data);

-- 执行查询并记录性能
EXPLAIN ANALYZE
SELECT * FROM index_test WHERE data = 30;

SELECT COUNT(*) FROM index_test WHERE data = 30;


CREATE TABLE txn_test (
    id SERIAL PRIMARY KEY,
    data TEXT
);


BEGIN;
INSERT INTO txn_test (data) VALUES ('test data');
UPDATE txn_test SET data = 'updated data' WHERE id = 1;
DELETE FROM txn_test WHERE id = 2;
COMMIT;

